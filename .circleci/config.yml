version: 2.1
orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: 
      workflow_id: 
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: 
      token_id: 
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            STATUS=$(curl -H "token: <<parameters.token_id>>" \
              --request GET https://api.memstash.io/values/migration-<<parameters.token_id>>)
            echo $STATUS

            if (( $STATUS==1 )); then           
              cd ~/project/backend
              npm i
              npm run migration:revert
            fi
            
           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
        #Your code here
          command: |
            cd frontend
            npm i
            npm run build  
        #    exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
            event: fail
            template: basic_fail_1

  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            # Your code here
            command: |
              cd backend
              npm i
              npm run build
            #  exit 1
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build
        - save_cache:
            paths: [backend/dist]
            key: backend-dist
        - slack/notify:
            event: fail
            template: basic_fail_1    

  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: frontend-test
            command: |
              cd frontend
              npm run test
        - slack/notify:
            event: fail
            template: basic_fail_1

                
  test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: backend-test
            command: |
              cd backend
              npm run test
        - slack/notify:
            event: fail
            template: basic_fail_1

  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: frontend-scan
            command: |
              cd frontend
              npm audit fix --audit-level=critical --force
        - slack/notify:
            event: fail
            template: basic_fail_1
        - slack/notify:
            event: pass
            template: basic_success_1

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: backend-scan
            command: |
              cd backend
              npm audit fix --audit-level=critical --force
        - slack/notify:
            event: fail
            template: basic_fail_1
        - slack/notify:
            event: pass
            template: basic_success_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --tags Project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --tags Project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-2  \
              --filters "Name=tag:Project, Values=udapeople" \
              --query "Reservations[].Instances[*].PublicIpAddress" \
              --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
            
      - run:  yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/            
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8e:b8:bf:7e:14:4f:4e:f7:5b:0f:f7:aa:7f:14:1d:9e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            cat ./.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=udapeople-prod >> "backend/.env"
            cat backend/.env
            ansible-playbook \
              -i ./.circleci/ansible/inventory.txt \
              ./.circleci/ansible/configure-server.yml
                
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: preparing for migration
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            sudo apt update
            sudo apt install -y awscli
            cat  backend/.env

      - run:
          name: Run migrations
          command: |      
            cd backend
            npm install
            npm run migrations > migrations.txt
            cat migrations.txt
            
            
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}
            
    # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region us-east-2  \
              --filters "Name=tag:Project, Values=udapeople" \
              --query "Reservations[].Instances[*].PublicIpAddress" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL=$API_URL >> ./frontend/.env
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp --recursive dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8e:b8:bf:7e:14:4f:4e:f7:5b:0f:f7:aa:7f:14:1d:9e"]
      - attach_workspace:
          at: ~/
      - restore_cache:
            keys: ["backend-dist"]  
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl openssh-client tar gzip curl
      - run:
          name: tar backend
          command: |
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend/dist
      - run:
          name: Deploy backend
          command: |
            ansible-playbook \
              -i ./.circleci/ansible/inventory.txt \
              ./.circleci/ansible/deploy-backend.yml

      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - revert-migrations
      - destroy-environment                
            

  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [dev]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]