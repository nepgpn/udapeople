version: 2.1
orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: 
      workflow_id: 
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-"${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name backend-"${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
        #Your code here
          command: |
            cd frontend
            npm i
            npm run build  
        #    exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            # Your code here
            command: |
              cd backend
              npm i
              npm run build
            #  exit 1
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: frontend-test
            command: |
              cd frontend
              npm run test

                
  test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: backend-test
            command: |
              cd backend
              npm run test

  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: frontend-scan
            command: |
              cd frontend
              npm audit fix --audit-level=critical --force
        - slack/notify:
            event: fail
            template: basic_fail_1
        - slack/notify:
            event: pass
            template: basic_success_1

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: backend-scan
            command: |
              cd backend
              npm audit fix --audit-level=critical --force
        - slack/notify:
            event: fail
            template: basic_fail_1
        - slack/notify:
            event: pass
            template: basic_success_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            ls -la . ..
            peintenv
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --tags Project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --tags Project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ls -lrt
            aws ec2 describe-instances --region us-east-2  \
              --filters "Name=tag:Project, Values=udapeople" \
              --query "Reservations[].Instances[*].PublicDnsName" \
              --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
                  
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"     

  
workflows:
  default:
    jobs:
      - deploy-infrastructure
      


